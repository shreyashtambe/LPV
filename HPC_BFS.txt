 
#include <bits/stdc++.h>
#include <omp.h>

using namespace std;

const int N = 1e5 + 5;
vector<int> g[N];
bool vis[N];
int  ans[N];
int ind=0;

void bfs(int s) {
    queue<int> q;
    q.push(s);
    vis[s] = true;
    ans[ind]=s;
    ind++;
    
    while (!q.empty()) {
        int u = q.front();
        q.pop();

        #pragma omp parallel for
        for (int i = 0; i < g[u].size(); i++) {
            int v = g[u][i];
            if (!vis[v]) {
                vis[v] = true;
                ans[ind]=v;
                ind++;
                q.push(v);
            }
        }
    }
}


int main() {
    int n, m, s;
    cout<<"enter no of vertices"<<endl;
    cin >> n ;
    cout<<"enter no of edges"<<endl;
    cin>> m ;
    cout<<"enter strating vertex"<<endl;
    cin >>s ;

    for (int i = 0; i < m; i++) {
        int x, y;
        cout<<"Enter edge"<<endl;
        cin >> x >> y;
        g[x].push_back(y);
        g[y].push_back(x);
    }

    
    bfs(s);
    
    cout << "The result of traversal:\n";
    for (int i = 0; i < n; i++) {
        
            cout << ans[i] << " ";
    }
    cout << endl;

    return 0;
}



/*
Input:

enter no of vertices
5
enter no of edges
4
enter strating vertex
1
Enter edge
1 2
Enter edge
1 3
Enter edge
2 4
Enter edge
3 5


Output:
The result of traversal:
1 2 3 4 5 

*/
 
 
 
 /*
 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
 
 Test Case:

Number of vertices (n): 5
Number of edges (m): 4
Starting vertex (s): 1
Edges: (1, 2), (1, 3), (2, 4), (3, 5)
Explanation:

User input:

Number of vertices: 5
Number of edges: 4
Starting vertex: 1
Edge input:

Edge 1: (1, 2) - There is an edge between vertex 1 and vertex 2.
Edge 2: (1, 3) - There is an edge between vertex 1 and vertex 3.
Edge 3: (2, 4) - There is an edge between vertex 2 and vertex 4.
Edge 4: (3, 5) - There is an edge between vertex 3 and vertex 5.
Graph construction:

The adjacency list representation of the graph is as follows:
g[1]: {2, 3}
g[2]: {1, 4}
g[3]: {1, 5}
g[4]: {2}
g[5]: {3}
Breadth-first search (BFS) traversal:

The BFS traversal starts from vertex 1.
Iteration 1:

The queue contains {1}.
Visited vertices: {1}.
The adjacent vertices of 1 are 2 and 3. They are added to the queue.
Iteration 2:

The queue contains {2, 3}.
Visited vertices: {1, 2}.
The adjacent vertices of 2 are 1 and 4. Vertex 1 is already visited, so only vertex 4 is added to the queue.
Iteration 3:

The queue contains {3, 4}.
Visited vertices: {1, 2, 3}.
The adjacent vertices of 3 are 1 and 5. Vertex 1 is already visited, so only vertex 5 is added to the queue.
Iteration 4:

The queue contains {4, 5}.
Visited vertices: {1, 2, 3, 4}.
There are no adjacent vertices of 4 to add to the queue.
Iteration 5:

The queue contains {5}.
Visited vertices: {1, 2, 3, 4, 5}.
There are no adjacent vertices of 5 to add to the queue.
The traversal is complete.

Output:

The code prints the result of the traversal:
The visited vertices are: 1, 2, 3, 4, 5.
Thus, the BFS traversal of the given graph starting from vertex 1 visits all vertices in the graph. The output matches the expected result.

use  following code if u want to  display content in g vector

    // for(int i = 1; i <= n; i++) {
    //     cout << "Vertex " << i << ": ";   
    //      for (int j = 0; j < g[i].size(); j++) {
    //             cout << g[i][j] << " ";    
        
    //     }   
    //     cout << endl;
    // }
    
 */
 
 
 
 
 /*
 
 
 incase external ask for tree BFS traversal
 
 CODE>:
 
#include <iostream>
#include <omp.h>
#include <queue>
struct Node {
    int value;
    Node *left;
    Node *right;

    Node(int value) : value(value), left(nullptr), right(nullptr) {}
};
void bfs(Node *root) {
    if (root == nullptr)
        return;

    std::queue<Node*> q;
    q.push(root);

    #pragma omp parallel
    #pragma omp single
    while (!q.empty()) {
        Node *node = q.front();
        q.pop();

        std::cout << "Visited " << node->value << std::endl;

        if (node->left != nullptr) {
            #pragma omp task
            q.push(node->left);
        }

        if (node->right != nullptr) {
            #pragma omp task
            q.push(node->right);
        }
    }
}

int main() {
    // Create a sample tree for testing
    Node* root = new Node(1);
    root->left = new Node(4);
    root->right = new Node(3);
    root->left->left = new Node(6);
    root->left->right = new Node(2);
    root->right->left = new Node(6);
    root->right->right = new Node(7);
     
    
    std::cout<<"BFS"<<std::endl;
    #pragma omp parallel
    {
        #pragma omp single
        bfs(root);
    }

    return 0;
}


 
 */

 

