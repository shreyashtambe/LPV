#include <stdio.h>
#include <iostream>
#include <cstdlib>
#include <omp.h>
#include <vector>
using namespace std;

int main() {
    int r = 3, c = 2;
    int matrix[r][c], vector[c], out[r];

    for (int row = 0; row < r; row++) {
        for (int col = 0; col < c; col++) {
            int x;
            cout<<"enter matrix element at index : "<<row<<","<<col<<" : ";
            cin>>x;
            matrix[row][col] = x;
        }
    }

    cout << "Input matrix" << endl;
    for (int row = 0; row < r; row++) {
        for (int col = 0; col < c; col++) {
            cout << "\t" << matrix[row][col];
        }
        cout << endl;
    }

    for (int col = 0; col < c; col++) {
        int x;
        cout<<"enter vector element at index : "<<col<<" : ";
        cin>>x;
        vector[col] = x;
    }
    cout << "Input col-vector" << endl;
    for (int row = 0; row < c; row++) {
        cout << vector[row] << endl;
    }

    #pragma omp parallel for
    for (int row = 0; row < r; row++) {
        out[row] = 0;
        for (int col = 0; col < c; col++) {
            out[row] += matrix[row][col] * vector[col];
        }
    }

    cout << "Resultant col-vector" << endl;
    for (int row = 0; row < r; row++) {
        cout << "\nVector [" << row << "]: " << out[row] << endl;
    }

    return 0;
}

/*

enter matrix element at index : 0,0 : 2
enter matrix element at index : 0,1 : 2
enter matrix element at index : 1,0 : 3
enter matrix element at index : 1,1 : 3
enter matrix element at index : 2,0 : 1
enter matrix element at index : 2,1 : 1
Input matrix
	2	2
	3	3
	1	1
enter vector element at index : 0 : 2
enter vector element at index : 1 : 2
Input col-vector
2
2
Resultant col-vector

Vector [0]: 8

Vector [1]: 12

Vector [2]: 4

*/
