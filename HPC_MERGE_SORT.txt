#include <iostream>
#include <cstdlib>
#include <ctime>
#include <omp.h>

using namespace std;
 

// Parallel Merge Sort function
void merge(int *array, int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 =  r - m;

    // Create temp arrays
    int *L = new int[n1];
    int *R = new int[n2];

    // Copy data to temp arrays L[] and R[]
    for (i = 0; i < n1; i++)
        L[i] = array[l + i];
    for (j = 0; j < n2; j++)
        R[j] = array[m + 1+ j];

    // Merge the temp arrays back into array[l..r]
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            array[k] = L[i];
            i++;
        } else {
            array[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy the remaining elements of L[], if there are any
    while (i < n1) {
        array[k] = L[i];
        i++;
        k++;
    }

    // Copy the remaining elements of R[], if there are any
    while (j < n2) {
        array[k] = R[j];
        j++;
        k++;
    }

    delete [] L;
    delete [] R;
}

void parallelMergeSort(int *array, int l, int r) {
    if (l < r) {
        int m = l+(r-l)/2;

        #pragma omp parallel sections
        {
            #pragma omp section
            parallelMergeSort(array, l, m);

            #pragma omp section
            parallelMergeSort(array, m+1, r);
        }

        merge(array, l, m, r);
    }
}

int main() {
    int n;
    cout << "Enter the size of the array: ";
    cin >> n;

int *array = new int[n];
 
for (int i = 0; i < n; i++) {
     int VAR;
    cout<<"ENTER ELEMENT AT INDEX "<<i<<" : ";
    cin>>VAR;
    cout<<endl;
    array[i] = VAR;
}

cout << "Original Array: ";
for (int i = 0; i < n; i++) {
    cout << array[i] << " ";
}
cout << endl;

 
    parallelMergeSort(array, 0, n-1);
 

cout << "Sorted Array: ";
for (int i = 0; i < n; i++) {
    cout << array[i] << " ";
}
cout << endl;

delete [] array;

return 0;
}

/*
Enter the size of the array: 6
ENTER ELEMENT AT INDEX 0 : 23
ENTER ELEMENT AT INDEX 1 : 54
ENTER ELEMENT AT INDEX 2 : 34
ENTER ELEMENT AT INDEX 3 : 2
ENTER ELEMENT AT INDEX 4 : 5
ENTER ELEMENT AT INDEX 5 : 44
Original Array: 23 54 34 2 5 44 
Sorted Array: 2 5 23 34 44 54 


1. Time Complexity Of parallel Merge Sort in best case is( when all data is already in sorted form):O(n)
2. Time Complexity Of parallel Merge Sort in worst case is: O(n logn)
3. Time Complexity Of parallel Merge Sort in average case is: O(n logn)


*/
 
